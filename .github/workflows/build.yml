name: wsl2_kernel

on:
  push:
  pull_request:
  schedule:
    - cron: 0 1 * * MON
  workflow_dispatch:

jobs:
  WinHv:
    runs-on: windows-latest
    steps:
    - run: Get-ChildItem "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots"
    - name: WinHV-headers
      run: |
        ls "c:/Program Files (x86)/Windows Kits/10/Include"
        mkdir ${{ runner.temp }}.release
        cp "c:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/WinHv*" ${{ runner.temp }}.release
    - uses: actions/upload-artifact@v2
      with:
        name: WinHv-headers
        path: ${{ runner.temp }}.release

  git:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: git-cache
      uses: actions/cache@v2
      id: qemu_repo
      with:
        path: qemu.git
        key: qemu.git-${{ secrets.CACHE_ID }}-${{ hashFiles('repo.sh') }}
    - if: steps.git_repo.outputs.cache-hit != 'true'
      run: ./repo.sh init

  w64-qemu-build:
    runs-on: ubuntu-latest
    needs: [git, WinHv]
    strategy:
      fail-fast: false
      matrix:
        version: ['v6.0.0','v5.2.0', 'v5.0.1', 'v5.1.0', 'v4.2.1', 'v3.1.1']
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: winhv
      uses: actions/download-artifact@v2
      with:
        name: WinHv-headers
        path: winhv
    - name: w64-qemu.image
      run: |
        set -x
        image=$(make w64-qemu.image_print)
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$GITHUB_REPOSITORY/$image
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        old_id=''
        if docker pull $IMAGE_ID; then
          old_id=$(docker image inspect $IMAGE_ID --format "{{.ID}}")
        fi
        make w64-qemu.image DOCKER_BUILD_OPTS="--cache-from=$IMAGE_ID"
        new_id=$(docker image inspect $image --format "{{.ID}}")
        if [ "$old_id" != "$new_id" ]; then
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag $image $IMAGE_ID:latest
          docker push $IMAGE_ID:latest || true
          rm -rf ~/.docker
        fi
    - name: ccache
      uses: actions/cache@v2
      id: qemu_ccache
      with:
        path: .ccache
        key: w64-qemu-ccache-${{ secrets.CACHE_ID }}-${{ matrix.version}}-${{ hashFiles('Dockerfile*','Makefile','build_w64.sh') }}
        restore-keys: |
            w64-qemu-ccache-${{ secrets.CACHE_ID }}-${{ matrix.version}}-${{ hashFiles('Dockerfile*','Makefile','build_w64.sh') }}
            w64-qemu-ccache-${{ secrets.CACHE_ID }}-${{ matrix.version}}
    - name: ccache.init
      if: steps.qemu_ccache.outputs.cache-hit != 'true'
      run: make w64-qemu.ccache-init
    - name: repo
      id: repo
      uses: actions/cache@v2
      with:
        path: qemu.git
        key: qemu.git-${{ secrets.CACHE_ID }}-${{ matrix.version}}-${{ hashFiles('repo.sh') }}
    - if: steps.repo.outputs.cache-hit != 'true'
      run: ./repo.sh init ${{ matrix.version }}
    - run: ./repo.sh update ${{ matrix.version }}
    - name: qemu-build
      run: make w64-qemu.ccache
    - name: w64-qemu
      if: true
      uses: actions/upload-artifact@v2
      with:
        name: w64-qemu-${{ matrix.version }}
        path: qemu/bin/ndebug/x86_64-w64-mingw32/.release

  alpine-image:
    runs-on: ubuntu-latest
    env:
      ALPINE_VERSION: '3.14'
      REPO: 'TheCBaH/docker_kvm'
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ env.REPO }}
        submodules: true
    - name: build-image
      run: |
        set -x
        image=$(make image.print)
        IMAGE_ID=ghcr.io/$REPO/$image
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        docker pull $IMAGE_ID || true
        make DOCKER_BUILD_OPTS="--cache-from=$IMAGE_ID" kvm_image
        make kvm_run CMD='./kvm.sh prepare'
        make alpine-make-vm-image.image
        sudo modprobe nbd max_part=0
        git -C alpine-make-vm-image apply <alpine/alpine_sync.patch
        make alpine-make-vm-image.image_run
        make kvm_run CMD='./compact-qcow.sh data/img/alpine-${ALPINE_VERSION}-boot.img'
        make alpine-${ALPINE_VERSION}.test.boot
        make kvm_run CMD='alpine/copy-kernel.sh ${ALPINE_VERSION}'
    - uses: actions/upload-artifact@v2
      with:
        name: alpine.image
        path: data/img

jobs:
  Test-w64-qemu:
    runs-on: windows-latest
    needs: [w64-qemu-build, alpine-image]
    env:
      QEMU_VERSION: 'v6.0.0'
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: alpine.image
        path: ${{ runner.temp }}/qemu
    - uses: actions/download-artifact@v2
      with:
        name: w64-qemu-${{ env.QEMU_VERSION }}
        path: ${{ runner.temp }}/qemu
    - run: ls ${{ runner.temp }}/qemu
